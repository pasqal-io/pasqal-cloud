name: Publish pasqal-cloud 📦 to PyPI and TestPyPI

on:
  push:
    branches:
      - main

jobs:
  build-n-publish:
    name: Build and publish Python 🐍 distributions 📦 to PyPI and TestPyPI
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@master

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Build the binary wheels and source tarballs
        shell: bash
        run: ./.github/scripts/package.sh

      - name: Publish distribution 📦 to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          skip-existing: true  # Allows repeating the action
          attestations: false  # Otherwise an attestation is added to dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-n-publish
    steps:
      - uses: actions/checkout@v2

      - name: Extract version from VERSION.txt
        id: get_version
        run: |
          version=$(cat VERSION.txt)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Get release notes from CHANGELOG.md
        run: |
          version=${{ env.VERSION }}
          # Extract notes from changelog
          notes=$(awk -v ver="$version" '
              BEGIN { found_version=0; leading_blank=1; }
              /## \[/ { if (found_version) { exit } }
              /## \['"$version"'\]/ {
                  found_version=1;
                  next
              }
              found_version {
                  # Remove the _released line
                  if ($0 ~ /^_released/) { next }

                  # Remove leading ### or ## or # and any additional whitespace
                  gsub(/^#+ +/, "", $0);

                  # Check if the line is blank
                  if ($0 != "") {
                      print $0;  # Print the current line
                      leading_blank=0;  # Reset leading blank flag
                  } else if (!leading_blank) {
                      print "";  # Print a blank line for subsequent empty lines
                  }
              }
          ' CHANGELOG.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display release notes
        run: echo "${{ env.RELEASE_NOTES }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
